import java.util.GregorianCalendar;


public class Journey
{
	private String startStop;
	private String endStop;
	private int via;
	private int startTime;
	private int endTime;
	private int viaTime;
	private int route;

	/**
	 * @param startStop
	 * @param endStop
	 * @param startTime
	 */
	public Journey(int startStop, int endStop, int startTime)
	{
		this.startStop = BusStopInfo.getFullName(startStop);
		this.endStop = BusStopInfo.getFullName(endStop);
		this.startTime = startTime;
		this.via = 0;
		getRoute();
		if(this.via == 0)
		{
			findVia();
		}
		getTimes();
		System.out.println("route: "+this.route);
		int[] stops = BusStopInfo.getBusStops(this.route);
		int currentStopCode = 0;
		for(int i = 0; i < stops.length; i++)
		{
			if(BusStopInfo.getFullName(stops[i]).equals(this.startStop))
			{
				currentStopCode = stops[i];
			}
		}
		int serviceCode = BusStopInfo.getService(currentStopCode, 720);
		int service = 0;
		GregorianCalendar cal = new GregorianCalendar(2013,4,2);
		int[] services = TimetableInfo.getServices(this.route, TimetableInfo.timetableKind(cal.getTime()));
		for(int i = 0; i < services.length; i++)
		{
			System.out.println("Service "+services[i]);
			System.out.println("Code "+serviceCode);
			if(services[i] == serviceCode)
			{
				service = i;
			}
		}
		System.out.println(service);
		int[] times = TimetableInfo.getServiceTimes(this.route, service);
		System.out.println(serviceCode);
		int currentTimeStop = TimetableInfo.getTimingPoint(serviceCode, times[0]);
		System.out.println("Stop "+currentTimeStop);
		int t = 1;
		while(!BusStopInfo.getFullName(currentTimeStop).equals(this.startStop))
		{
			currentTimeStop = TimetableInfo.getTimingPoint(serviceCode, times[t]);
			t++;
		}
		t--;
		System.out.println("Timing "+BusStopInfo.getFullName(TimetableInfo.getTimingPoint(serviceCode, times[t])));
		int i = 1;
		while(!BusStopInfo.getFullName(currentStopCode).equals(this.endStop))
		{
			System.out.println(i+". "+BusStopInfo.getFullName(currentStopCode)+" "+times[t]);
			currentStopCode = BusStopInfo.getNextStop(currentStopCode, this.route);
			i++;
			t++;
		}
		System.out.println(i+". "+BusStopInfo.getFullName(currentStopCode)+" "+times[t]);
	}

	private void getTimes()
	{

	}


	private void getRoute()
	{
		int theRoute = 0;
		int best = 99999;
		int[] routes = BusStopInfo.getRoutes();
		for(int route = 0; route < routes.length; route++)
		{
			int[] stops = BusStopInfo.getBusStops(routes[route]);
			int stop = 0;
			int distance = 0;
			while(stop < stops.length)
			{
				if(BusStopInfo.getFullName(stops[stop]).equals(startStop))
				{
					while(stop < stops.length)
					{
						distance++;
						if(BusStopInfo.getFullName(stops[stop]).equals(endStop)&& distance < best)
						{
							theRoute = routes[route];
							best = distance;
						}
						stop++;
					}
				}
				stop++;
			}
		}
		this.route = theRoute;
	}
	
	private void findVia()
	{
		int[] sameRoutes = getSameRoutes();
		for(int i = 0; i < sameRoutes.length; i++)
		{
			//System.out.println("the"+sameRoutes[i]);
		}
	}
	
	private int[] getSameRoutes()
	{
		int[] sameRoutes;
		int[] similarRoutes = new int[4];
		boolean[] startRoutes = new boolean[4];
		boolean[] endRoutes = new boolean[4];
		for(int i = 0; i < 4; i++)
		{
			similarRoutes[i] = -1;
			startRoutes[i] = false;
			endRoutes[i] = false;
		}
		
		int[] routes = BusStopInfo.getRoutes();
		for(int route = 0; route < routes.length; route++)
		{
			int[] stops = BusStopInfo.getBusStops(routes[route]);
			for(int stop = 0; stop < stops.length; stop++)
			{
				if(BusStopInfo.getFullName(stops[stop]).equals(startStop))
				{
					startRoutes[route] = true;
				}
				if(BusStopInfo.getFullName(stops[stop]).equals(endStop))
				{
					endRoutes[route] = true;
				}
			}
		}
		int simRoutes = 0;
		for(int i = 0; i < 4; i++)
		{
			if(startRoutes[i] && endRoutes[i])
			{
				simRoutes++;
				similarRoutes[i] = routes[i];
			}
		}
		sameRoutes = new int[simRoutes];
		int j = 0;
		for(int i = 0; i < 4; i++)
		{
			if(similarRoutes[i] != -1)
			{
				sameRoutes[j] = similarRoutes[i];
				j++;
			}
		}
		return sameRoutes;
	}

}
