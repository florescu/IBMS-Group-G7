import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.PriorityQueue;


public class Journey
{
	private Stop[] stops;

	/**
	 * @param startStop
	 * @param endStop
	 * @param startTime
	 */
	public Journey()
	{
		String[] theStops = BusStopInfo.getBusStops();
		this.stops = new Stop[theStops.length];
		for(int i = 0; i < theStops.length; i++)
		{
			this.stops[i] = new Stop(theStops[i]);
		}
	}
	
	public static List<Stop> getShortestPathTo(Stop target)
	{
		List<Stop> path = new ArrayList<Stop>();
		for(Stop stop = target; stop != null; stop = stop.getPrevious())
		{
			path.add(stop);
		}
		
		Collections.reverse(path);
		return path;
	}
	
	public static void calculatePaths(Stop startStop)
	{
		//Set the min distance of start stop to 0
		startStop.setMinDistance(0);
		//Priority queue to store stops
		PriorityQueue<Stop> stopQueue = new PriorityQueue<Stop>();
		//Add the startStop to the queue
		stopQueue.add(startStop);
		//While the stopQueue is not empty
		while(!stopQueue.isEmpty())
		{
			//Remove the stop from the front of the queue 
			Stop u = stopQueue.poll();
			//For all edges of the stop work out minDistance
			for(Edge edge: u.getAdj())
			{
				Stop stop = edge.getTarget();
				//Calculate the min ditance going though u
				int distanceThroughU = u.getMinDistance() + edge.getDistance();
				//If smaller than the current min for stop then set min and previous
				if(distanceThroughU < stop.getMinDistance())
				{
					stopQueue.remove(stop);
					stop.setMinDistance(distanceThroughU);
					stop.setPrevious(u);
					stopQueue.add(stop);
				}
			}
		}
	}
}
